import { Widget } from "./widget";
import { Canvas } from "./canvas";
import { Settings } from "./avatarcropper";
export interface ShallowCircle {
    x: number;
    y: number;
    diameter: number;
}
export declare class CropView extends Widget {
    readonly image: HTMLImageElement;
    readonly overlay: Canvas;
    private _isZoomFitted;
    private _zoomFactor;
    private currentRotation;
    currentFileType: string;
    private circle;
    private _width;
    private _height;
    private _filename;
    private currentAction;
    private mouseOrigin;
    readonly settings: Settings;
    private readonly renderer;
    private loadingImage;
    private antialiased;
    constructor(settingsObject: Settings);
    readonly rotation: number;
    readonly cropArea: ShallowCircle;
    readonly zoomFactor: number;
    refresh(): void;
    reactTMToRefresh(): void;
    private renderOverlay;
    readonly innerWidth: number;
    readonly innerHeight: number;
    readonly outerWidth: number;
    readonly outerHeight: number;
    readonly width: number;
    readonly height: number;
    readonly minDim: number;
    private isZoomFitted;
    zoom(factor?: number): void;
    zoomIn(): void;
    zoomOut(): void;
    zoomFit(force?: boolean): void;
    rotate(deg?: number): void;
    antialias: boolean;
    setImageFromFile(file: File): void;
    private setImageFromFileHelper;
    flipHorizontal(): void;
    flipVertical(): void;
    private flipHelper;
    renderCroppedImage(): void;
    readonly filename: string;
    readonly src: string;
    private getMouseAction;
    private mouseDown;
    private mouseMove;
    private performResize;
}
//# sourceMappingURL=cropview.d.ts.map