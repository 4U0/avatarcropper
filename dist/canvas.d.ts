export declare class Canvas {
    canvas: HTMLCanvasElement;
    translation: any;
    align: any;
    usingDeepCalc: boolean;
    mouse: any;
    offset: any;
    constructor(options: any);
    static round(x: any): any;
    resize(w?: any, h?: any, redraw?: any): void;
    zoom(x?: any, y?: any): void;
    scale(x?: any, y?: any): void;
    clear(): void;
    deepCalcPosition(): void;
    posFromEvent(e: any): {
        x: any;
        y: any;
    };
    mouseMove(e: any): void;
    mouseDown(e: any): void;
    mouseUp(e: any): void;
    mouseLeave(e: any): void;
    readonly context: CanvasRenderingContext2D;
    pixelated: any;
    width: number;
    height: number;
    opacity: number;
    color: string | CanvasGradient | CanvasPattern;
    font: string;
    lineWidth: number;
    blendMode: string;
    lineDash: number[];
    createBlob(callback: any, mimeType?: any): void;
    createImage(callback: any, mimeType?: any, autoRevoke?: boolean): void;
    drawImage(image: any, x?: any, y?: any, w?: any, h?: any): void;
    drawScaledImage(image: any, x: any, y: any, sw: any, sh: any): void;
    drawCroppedImage(image: any, x: any, y: any, cx: any, cy: any, cw: any, ch: any, w?: any, h?: any): void;
    drawRotatedCroppedImage(image: any, rotate: any, anchorX: any, anchorY: any, x: any, y: any, cx: any, cy: any, cw: any, ch: any, w: any, h: any): void;
    fillImage(image: any, resizeToFit: any): void;
    drawLine(x1: any, y1: any, x2: any, y2: any, color?: any, lineWidth?: any): void;
    drawRect(x: any, y: any, w: any, h: any, color: any, lineWidth: any, sharp: any): void;
    fillRect(x: any, y: any, w: any, h: any, color: any): void;
    drawRoundedRect(x: any, y: any, w: any, h: any, r: any, color: any, lineWidth: any, sharp: any): void;
    fillRoundedRect(x: any, y: any, w: any, h: any, r: any, color: any, sharp?: any): void;
    fill(color: any): void;
    fillText(text: any, x: any, y: any, color: any, baseline: any, align: any, font: any): void;
    fillCircleInSquare(x: any, y: any, diameter: any, color: any): void;
    drawCircleInSquare(x: any, y: any, diameter: any, color: any, lineWidth: any): void;
    drawRotatedImage(image: Canvas | HTMLImageElement | HTMLCanvasElement, rotate: number, x: number, y: number, w?: number, h?: number): void;
    static fileToImage(file: any, callback: any, autoRevoke?: boolean): void;
}
//# sourceMappingURL=canvas.d.ts.map